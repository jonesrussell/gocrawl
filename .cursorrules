Code Organization & Structure
- Split large files into smaller, focused modules
- Keep related functionality together
- Use consistent naming across related components
- Avoid type stuttering in package names (e.g., use `Config` not `CollectorConfig`)
- Use descriptive variable names to avoid shadowing
- Avoid global state where possible
- Keep function complexity below 30 (cyclop max-complexity)
- Keep package average complexity below 10 (cyclop package-average)
- Limit function length to 100 lines or 50 statements (funlen)
- Use canonical import paths

Dependency Injection & Interfaces
- Use fx.In and fx.Out for dependency injection
- Define interfaces in the package that uses them, not where they are implemented
- For module-specific interfaces, define them in module.go
- For interfaces used across multiple packages, define them in the consuming package
- Avoid interface stuttering (e.g., use `Logger` instead of `CollectorLogger`)
- Use type aliases from common package:
  - Use common.Logger instead of logger.Interface
  - Use common.Storage instead of storage.Interface
  - Use common.Config instead of config.Config
- Define New* constructors only in module.go files
- When testing fx modules:
  - Provide all required dependencies with correct names
  - Use fx.Annotate for named dependencies
  - Avoid providing dependencies that are already provided by the module
  - Use fx.NopLogger in tests to reduce noise
  - Test dependency injection separately from lifecycle
  - Use test helpers for common dependency setup
  - Verify dependency injection before testing functionality

Error Handling
- Prefer errors.New over fmt.Errorf for simple error messages
- Check error return values
- Use descriptive error variable names to avoid shadowing
- Wrap errors with context when appropriate
- Always check type assertion errors
- Check SQL Row and Statement closures
- Include context in error handling where available

Testing
- Use require for error assertions
- Avoid allocations with (*os.File).WriteString
- Avoid shadow declarations
- Test each module independently
- Write testable examples with expected output
- Use t.Parallel() appropriately in tests
- Place tests in a separate _test package
- Use testify consistently for assertions
- Follow test naming conventions:
  - Test[FunctionName] for function tests
  - Test[TypeName] for type tests
  - Test[InterfaceName] for interface tests
- Structure tests with setup, execution, and verification phases
- Use table-driven tests for multiple test cases
- Mock external dependencies consistently
- Use test helpers to reduce code duplication
- Test both success and failure cases
- Test edge cases and boundary conditions
- Use meaningful test data
- Document test setup and assumptions
- Keep tests focused and single-purpose
- Use subtests for related test cases
- Test public interfaces, not implementation details
- Use test fixtures for complex test data
- Clean up resources in test teardown
- Use test-specific types and interfaces
- Avoid test interdependence
- Use meaningful assertion messages
- Test error conditions explicitly
- Use test coverage tools appropriately
- For fx-based tests:
  - Test module construction separately
  - Test dependency injection separately
  - Test lifecycle separately
  - Use fx.Invoke for verification
  - Clean up resources in defer
  - Use fx.Supply for simple dependencies
  - Use fx.Provide for complex dependencies
  - Use fx.Annotate for named dependencies
  - Avoid duplicate dependency providers

Dependencies
- Use go 1.24
- Required packages:
  github.com/elastic/go-elasticsearch/v8
  github.com/gocolly/colly/v2
  github.com/joho/godotenv
  github.com/spf13/cobra
  go.uber.org/fx
  go.uber.org/zap
- Avoid deprecated packages:
  - Use google.golang.org/protobuf instead of github.com/golang/protobuf
  - Use github.com/google/uuid instead of github.com/satori/go.uuid
  - Use github.com/gofrs/uuid/v5+ instead of github.com/gofrs/uuid

Documentation
- Provide brief explanations of code updates
- Document interface requirements
- Include examples for complex patterns
- End comments with periods (except for noinspection/TODO comments)
- Document magic numbers with constants
- Include context in logging calls where available

Style & Best Practices
- Use named returns sparingly and document when used
- Ensure exhaustive switch statements and map initializations
- Include context in HTTP requests
- Close response bodies in HTTP clients
- Use standard library variables where available
- Avoid magic numbers in code
- For HTML processing:
  - Use goquery for HTML parsing
  - Validate HTML before processing
  - Handle malformed HTML gracefully
  - Use CSS selectors for element selection
  - Document selector requirements
  - Handle timezone conversions explicitly
  - Validate time formats before parsing
  - Use constants for common time formats
  - Handle empty or missing elements gracefully
  - Document error conditions and recovery
  - Use meaningful error messages
  - Include context in error handling
  - Clean up resources properly
  - Handle concurrent access safely
  - Use appropriate logging levels
  - Document performance considerations
  - Use appropriate metrics for monitoring
  - Handle edge cases explicitly
  - Use table-driven tests for validation
  - Mock external dependencies in tests
  - Use test fixtures for complex HTML
  - Document test assumptions
  - Clean up test resources
  - Use appropriate test helpers
  - Test error conditions thoroughly
  - Use meaningful test data
  - Document test setup
  - Keep tests focused
  - Use subtests for related cases
  - Test public interfaces
  - Use test-specific types
  - Avoid test interdependence
  - Use meaningful assertions
  - Test error conditions
  - Use coverage tools
  - For fx-based tests:
    - Test module construction
    - Test dependency injection
    - Test lifecycle
    - Use fx.Invoke
    - Clean up resources
    - Use fx.Supply
    - Use fx.Provide
    - Use fx.Annotate
    - Avoid duplicates
