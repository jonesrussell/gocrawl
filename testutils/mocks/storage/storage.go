// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/types/interface.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/jonesrussell/gocrawl/internal/storage/types"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockInterface) Aggregate(ctx context.Context, index string, aggs any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, index, aggs)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockInterfaceMockRecorder) Aggregate(ctx, index, aggs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockInterface)(nil).Aggregate), ctx, index, aggs)
}

// Close mocks base method.
func (m *MockInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInterface)(nil).Close))
}

// Count mocks base method.
func (m *MockInterface) Count(ctx context.Context, index string, query any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, index, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockInterfaceMockRecorder) Count(ctx, index, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockInterface)(nil).Count), ctx, index, query)
}

// CreateIndex mocks base method.
func (m *MockInterface) CreateIndex(ctx context.Context, index string, mapping map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", ctx, index, mapping)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockInterfaceMockRecorder) CreateIndex(ctx, index, mapping interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockInterface)(nil).CreateIndex), ctx, index, mapping)
}

// DeleteDocument mocks base method.
func (m *MockInterface) DeleteDocument(ctx context.Context, index, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocument", ctx, index, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDocument indicates an expected call of DeleteDocument.
func (mr *MockInterfaceMockRecorder) DeleteDocument(ctx, index, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocument", reflect.TypeOf((*MockInterface)(nil).DeleteDocument), ctx, index, id)
}

// DeleteIndex mocks base method.
func (m *MockInterface) DeleteIndex(ctx context.Context, index string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", ctx, index)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndex indicates an expected call of DeleteIndex.
func (mr *MockInterfaceMockRecorder) DeleteIndex(ctx, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockInterface)(nil).DeleteIndex), ctx, index)
}

// GetDocument mocks base method.
func (m *MockInterface) GetDocument(ctx context.Context, index, id string, document any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", ctx, index, id, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockInterfaceMockRecorder) GetDocument(ctx, index, id, document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockInterface)(nil).GetDocument), ctx, index, id, document)
}

// GetIndexDocCount mocks base method.
func (m *MockInterface) GetIndexDocCount(ctx context.Context, index string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexDocCount", ctx, index)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexDocCount indicates an expected call of GetIndexDocCount.
func (mr *MockInterfaceMockRecorder) GetIndexDocCount(ctx, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexDocCount", reflect.TypeOf((*MockInterface)(nil).GetIndexDocCount), ctx, index)
}

// GetIndexHealth mocks base method.
func (m *MockInterface) GetIndexHealth(ctx context.Context, index string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexHealth", ctx, index)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexHealth indicates an expected call of GetIndexHealth.
func (mr *MockInterfaceMockRecorder) GetIndexHealth(ctx, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexHealth", reflect.TypeOf((*MockInterface)(nil).GetIndexHealth), ctx, index)
}

// GetIndexManager mocks base method.
func (m *MockInterface) GetIndexManager() types.IndexManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexManager")
	ret0, _ := ret[0].(types.IndexManager)
	return ret0
}

// GetIndexManager indicates an expected call of GetIndexManager.
func (mr *MockInterfaceMockRecorder) GetIndexManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexManager", reflect.TypeOf((*MockInterface)(nil).GetIndexManager))
}

// GetMapping mocks base method.
func (m *MockInterface) GetMapping(ctx context.Context, index string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapping", ctx, index)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapping indicates an expected call of GetMapping.
func (mr *MockInterfaceMockRecorder) GetMapping(ctx, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapping", reflect.TypeOf((*MockInterface)(nil).GetMapping), ctx, index)
}

// IndexDocument mocks base method.
func (m *MockInterface) IndexDocument(ctx context.Context, index, id string, document any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexDocument", ctx, index, id, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexDocument indicates an expected call of IndexDocument.
func (mr *MockInterfaceMockRecorder) IndexDocument(ctx, index, id, document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDocument", reflect.TypeOf((*MockInterface)(nil).IndexDocument), ctx, index, id, document)
}

// IndexExists mocks base method.
func (m *MockInterface) IndexExists(ctx context.Context, index string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexExists", ctx, index)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexExists indicates an expected call of IndexExists.
func (mr *MockInterfaceMockRecorder) IndexExists(ctx, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexExists", reflect.TypeOf((*MockInterface)(nil).IndexExists), ctx, index)
}

// ListIndices mocks base method.
func (m *MockInterface) ListIndices(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndices", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndices indicates an expected call of ListIndices.
func (mr *MockInterfaceMockRecorder) ListIndices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndices", reflect.TypeOf((*MockInterface)(nil).ListIndices), ctx)
}

// Search mocks base method.
func (m *MockInterface) Search(ctx context.Context, index string, query any) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, index, query)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockInterfaceMockRecorder) Search(ctx, index, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockInterface)(nil).Search), ctx, index, query)
}

// SearchDocuments mocks base method.
func (m *MockInterface) SearchDocuments(ctx context.Context, index string, query map[string]any, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDocuments", ctx, index, query, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchDocuments indicates an expected call of SearchDocuments.
func (mr *MockInterfaceMockRecorder) SearchDocuments(ctx, index, query, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDocuments", reflect.TypeOf((*MockInterface)(nil).SearchDocuments), ctx, index, query, result)
}

// TestConnection mocks base method.
func (m *MockInterface) TestConnection(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestConnection", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestConnection indicates an expected call of TestConnection.
func (mr *MockInterfaceMockRecorder) TestConnection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnection", reflect.TypeOf((*MockInterface)(nil).TestConnection), ctx)
}

// UpdateMapping mocks base method.
func (m *MockInterface) UpdateMapping(ctx context.Context, index string, mapping map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapping", ctx, index, mapping)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMapping indicates an expected call of UpdateMapping.
func (mr *MockInterfaceMockRecorder) UpdateMapping(ctx, index, mapping interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapping", reflect.TypeOf((*MockInterface)(nil).UpdateMapping), ctx, index, mapping)
}
