// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/api.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSearchManager is a mock of SearchManager interface.
type MockSearchManager struct {
	ctrl     *gomock.Controller
	recorder *MockSearchManagerMockRecorder
}

// MockSearchManagerMockRecorder is the mock recorder for MockSearchManager.
type MockSearchManagerMockRecorder struct {
	mock *MockSearchManager
}

// NewMockSearchManager creates a new mock instance.
func NewMockSearchManager(ctrl *gomock.Controller) *MockSearchManager {
	mock := &MockSearchManager{ctrl: ctrl}
	mock.recorder = &MockSearchManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchManager) EXPECT() *MockSearchManagerMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockSearchManager) Aggregate(ctx context.Context, index string, aggs map[string]any) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, index, aggs)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockSearchManagerMockRecorder) Aggregate(ctx, index, aggs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockSearchManager)(nil).Aggregate), ctx, index, aggs)
}

// Close mocks base method.
func (m *MockSearchManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSearchManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSearchManager)(nil).Close))
}

// Count mocks base method.
func (m *MockSearchManager) Count(ctx context.Context, index string, query map[string]any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, index, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSearchManagerMockRecorder) Count(ctx, index, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSearchManager)(nil).Count), ctx, index, query)
}

// Search mocks base method.
func (m *MockSearchManager) Search(ctx context.Context, index string, query map[string]any) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, index, query)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchManagerMockRecorder) Search(ctx, index, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchManager)(nil).Search), ctx, index, query)
}
