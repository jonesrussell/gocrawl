// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/index_manager.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIndexManager is a mock of IndexManager interface.
type MockIndexManager struct {
	ctrl     *gomock.Controller
	recorder *MockIndexManagerMockRecorder
}

// MockIndexManagerMockRecorder is the mock recorder for MockIndexManager.
type MockIndexManagerMockRecorder struct {
	mock *MockIndexManager
}

// NewMockIndexManager creates a new mock instance.
func NewMockIndexManager(ctrl *gomock.Controller) *MockIndexManager {
	mock := &MockIndexManager{ctrl: ctrl}
	mock.recorder = &MockIndexManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexManager) EXPECT() *MockIndexManagerMockRecorder {
	return m.recorder
}

// DeleteIndex mocks base method.
func (m *MockIndexManager) DeleteIndex(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndex indicates an expected call of DeleteIndex.
func (mr *MockIndexManagerMockRecorder) DeleteIndex(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockIndexManager)(nil).DeleteIndex), ctx, name)
}

// EnsureArticleIndex mocks base method.
func (m *MockIndexManager) EnsureArticleIndex(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureArticleIndex", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureArticleIndex indicates an expected call of EnsureArticleIndex.
func (mr *MockIndexManagerMockRecorder) EnsureArticleIndex(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureArticleIndex", reflect.TypeOf((*MockIndexManager)(nil).EnsureArticleIndex), ctx, name)
}

// EnsureContentIndex mocks base method.
func (m *MockIndexManager) EnsureContentIndex(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureContentIndex", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureContentIndex indicates an expected call of EnsureContentIndex.
func (mr *MockIndexManagerMockRecorder) EnsureContentIndex(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureContentIndex", reflect.TypeOf((*MockIndexManager)(nil).EnsureContentIndex), ctx, name)
}

// EnsureIndex mocks base method.
func (m *MockIndexManager) EnsureIndex(ctx context.Context, name string, mapping any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureIndex", ctx, name, mapping)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureIndex indicates an expected call of EnsureIndex.
func (mr *MockIndexManagerMockRecorder) EnsureIndex(ctx, name, mapping interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureIndex", reflect.TypeOf((*MockIndexManager)(nil).EnsureIndex), ctx, name, mapping)
}

// GetMapping mocks base method.
func (m *MockIndexManager) GetMapping(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapping", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapping indicates an expected call of GetMapping.
func (mr *MockIndexManagerMockRecorder) GetMapping(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapping", reflect.TypeOf((*MockIndexManager)(nil).GetMapping), ctx, name)
}

// IndexExists mocks base method.
func (m *MockIndexManager) IndexExists(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexExists", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexExists indicates an expected call of IndexExists.
func (mr *MockIndexManagerMockRecorder) IndexExists(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexExists", reflect.TypeOf((*MockIndexManager)(nil).IndexExists), ctx, name)
}

// UpdateMapping mocks base method.
func (m *MockIndexManager) UpdateMapping(ctx context.Context, name string, mapping map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapping", ctx, name, mapping)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMapping indicates an expected call of UpdateMapping.
func (mr *MockIndexManagerMockRecorder) UpdateMapping(ctx, name, mapping interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapping", reflect.TypeOf((*MockIndexManager)(nil).UpdateMapping), ctx, name, mapping)
}
