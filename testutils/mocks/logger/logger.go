// Code generated by MockGen. DO NOT EDIT.
// Source: internal/logger/logger.go

// Package logger is a generated GoMock package.
package logger

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	logger "github.com/jonesrussell/gocrawl/internal/logger"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockInterface) Debug(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockInterfaceMockRecorder) Debug(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockInterface)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockInterface) Error(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockInterfaceMockRecorder) Error(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockInterface)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockInterface) Fatal(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockInterfaceMockRecorder) Fatal(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockInterface)(nil).Fatal), varargs...)
}

// Info mocks base method.
func (m *MockInterface) Info(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockInterfaceMockRecorder) Info(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockInterface)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockInterface) Warn(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockInterfaceMockRecorder) Warn(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockInterface)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockInterface) With(fields ...any) logger.Interface {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockInterfaceMockRecorder) With(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockInterface)(nil).With), fields...)
}

// WithComponent mocks base method.
func (m *MockInterface) WithComponent(component string) logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithComponent", component)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// WithComponent indicates an expected call of WithComponent.
func (mr *MockInterfaceMockRecorder) WithComponent(component interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithComponent", reflect.TypeOf((*MockInterface)(nil).WithComponent), component)
}

// WithDuration mocks base method.
func (m *MockInterface) WithDuration(duration time.Duration) logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDuration", duration)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// WithDuration indicates an expected call of WithDuration.
func (mr *MockInterfaceMockRecorder) WithDuration(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDuration", reflect.TypeOf((*MockInterface)(nil).WithDuration), duration)
}

// WithEnvironment mocks base method.
func (m *MockInterface) WithEnvironment(env string) logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithEnvironment", env)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// WithEnvironment indicates an expected call of WithEnvironment.
func (mr *MockInterfaceMockRecorder) WithEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithEnvironment", reflect.TypeOf((*MockInterface)(nil).WithEnvironment), env)
}

// WithError mocks base method.
func (m *MockInterface) WithError(err error) logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithError", err)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// WithError indicates an expected call of WithError.
func (mr *MockInterfaceMockRecorder) WithError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithError", reflect.TypeOf((*MockInterface)(nil).WithError), err)
}

// WithRequestID mocks base method.
func (m *MockInterface) WithRequestID(requestID string) logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRequestID", requestID)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// WithRequestID indicates an expected call of WithRequestID.
func (mr *MockInterfaceMockRecorder) WithRequestID(requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRequestID", reflect.TypeOf((*MockInterface)(nil).WithRequestID), requestID)
}

// WithSpanID mocks base method.
func (m *MockInterface) WithSpanID(spanID string) logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSpanID", spanID)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// WithSpanID indicates an expected call of WithSpanID.
func (mr *MockInterfaceMockRecorder) WithSpanID(spanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSpanID", reflect.TypeOf((*MockInterface)(nil).WithSpanID), spanID)
}

// WithTraceID mocks base method.
func (m *MockInterface) WithTraceID(traceID string) logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTraceID", traceID)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// WithTraceID indicates an expected call of WithTraceID.
func (mr *MockInterfaceMockRecorder) WithTraceID(traceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTraceID", reflect.TypeOf((*MockInterface)(nil).WithTraceID), traceID)
}

// WithUser mocks base method.
func (m *MockInterface) WithUser(userID string) logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUser", userID)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// WithUser indicates an expected call of WithUser.
func (mr *MockInterfaceMockRecorder) WithUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUser", reflect.TypeOf((*MockInterface)(nil).WithUser), userID)
}

// WithVersion mocks base method.
func (m *MockInterface) WithVersion(version string) logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithVersion", version)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// WithVersion indicates an expected call of WithVersion.
func (mr *MockInterfaceMockRecorder) WithVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithVersion", reflect.TypeOf((*MockInterface)(nil).WithVersion), version)
}
