// Code generated by MockGen. DO NOT EDIT.
// Source: internal/crawler/interfaces.go

// Package crawler is a generated GoMock package.
package crawler

import (
	context "context"
	reflect "reflect"
	time "time"

	colly "github.com/gocolly/colly/v2"
	gomock "github.com/golang/mock/gomock"
	common "github.com/jonesrussell/gocrawl/internal/common"
	content "github.com/jonesrussell/gocrawl/internal/content"
	events "github.com/jonesrussell/gocrawl/internal/crawler/events"
	interfaces "github.com/jonesrussell/gocrawl/internal/interfaces"
	logger "github.com/jonesrussell/gocrawl/internal/logger"
	models "github.com/jonesrussell/gocrawl/internal/models"
	sources "github.com/jonesrussell/gocrawl/internal/sources"
)

// MockCrawlerInterface is a mock of CrawlerInterface interface.
type MockCrawlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerInterfaceMockRecorder
}

// MockCrawlerInterfaceMockRecorder is the mock recorder for MockCrawlerInterface.
type MockCrawlerInterfaceMockRecorder struct {
	mock *MockCrawlerInterface
}

// NewMockCrawlerInterface creates a new mock instance.
func NewMockCrawlerInterface(ctrl *gomock.Controller) *MockCrawlerInterface {
	mock := &MockCrawlerInterface{ctrl: ctrl}
	mock.recorder = &MockCrawlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawlerInterface) EXPECT() *MockCrawlerInterfaceMockRecorder {
	return m.recorder
}

// GetMetrics mocks base method.
func (m *MockCrawlerInterface) GetMetrics() *common.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(*common.Metrics)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockCrawlerInterfaceMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockCrawlerInterface)(nil).GetMetrics))
}

// Start mocks base method.
func (m *MockCrawlerInterface) Start(ctx context.Context, sourceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, sourceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCrawlerInterfaceMockRecorder) Start(ctx, sourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCrawlerInterface)(nil).Start), ctx, sourceName)
}

// Stop mocks base method.
func (m *MockCrawlerInterface) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockCrawlerInterfaceMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCrawlerInterface)(nil).Stop), ctx)
}

// Subscribe mocks base method.
func (m *MockCrawlerInterface) Subscribe(handler events.EventHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", handler)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCrawlerInterfaceMockRecorder) Subscribe(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCrawlerInterface)(nil).Subscribe), handler)
}

// MockCrawlerState is a mock of CrawlerState interface.
type MockCrawlerState struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerStateMockRecorder
}

// MockCrawlerStateMockRecorder is the mock recorder for MockCrawlerState.
type MockCrawlerStateMockRecorder struct {
	mock *MockCrawlerState
}

// NewMockCrawlerState creates a new mock instance.
func NewMockCrawlerState(ctrl *gomock.Controller) *MockCrawlerState {
	mock := &MockCrawlerState{ctrl: ctrl}
	mock.recorder = &MockCrawlerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawlerState) EXPECT() *MockCrawlerStateMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockCrawlerState) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockCrawlerStateMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockCrawlerState)(nil).Cancel))
}

// Context mocks base method.
func (m *MockCrawlerState) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCrawlerStateMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCrawlerState)(nil).Context))
}

// CurrentSource mocks base method.
func (m *MockCrawlerState) CurrentSource() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentSource")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentSource indicates an expected call of CurrentSource.
func (mr *MockCrawlerStateMockRecorder) CurrentSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentSource", reflect.TypeOf((*MockCrawlerState)(nil).CurrentSource))
}

// IsRunning mocks base method.
func (m *MockCrawlerState) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockCrawlerStateMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockCrawlerState)(nil).IsRunning))
}

// StartTime mocks base method.
func (m *MockCrawlerState) StartTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// StartTime indicates an expected call of StartTime.
func (mr *MockCrawlerStateMockRecorder) StartTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTime", reflect.TypeOf((*MockCrawlerState)(nil).StartTime))
}

// Stop mocks base method.
func (m *MockCrawlerState) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCrawlerStateMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCrawlerState)(nil).Stop))
}

// MockCrawlerMetrics is a mock of CrawlerMetrics interface.
type MockCrawlerMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerMetricsMockRecorder
}

// MockCrawlerMetricsMockRecorder is the mock recorder for MockCrawlerMetrics.
type MockCrawlerMetricsMockRecorder struct {
	mock *MockCrawlerMetrics
}

// NewMockCrawlerMetrics creates a new mock instance.
func NewMockCrawlerMetrics(ctrl *gomock.Controller) *MockCrawlerMetrics {
	mock := &MockCrawlerMetrics{ctrl: ctrl}
	mock.recorder = &MockCrawlerMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawlerMetrics) EXPECT() *MockCrawlerMetricsMockRecorder {
	return m.recorder
}

// GetErrorCount mocks base method.
func (m *MockCrawlerMetrics) GetErrorCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetErrorCount indicates an expected call of GetErrorCount.
func (mr *MockCrawlerMetricsMockRecorder) GetErrorCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorCount", reflect.TypeOf((*MockCrawlerMetrics)(nil).GetErrorCount))
}

// GetLastProcessedTime mocks base method.
func (m *MockCrawlerMetrics) GetLastProcessedTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastProcessedTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastProcessedTime indicates an expected call of GetLastProcessedTime.
func (mr *MockCrawlerMetricsMockRecorder) GetLastProcessedTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastProcessedTime", reflect.TypeOf((*MockCrawlerMetrics)(nil).GetLastProcessedTime))
}

// GetProcessedCount mocks base method.
func (m *MockCrawlerMetrics) GetProcessedCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessedCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetProcessedCount indicates an expected call of GetProcessedCount.
func (mr *MockCrawlerMetricsMockRecorder) GetProcessedCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessedCount", reflect.TypeOf((*MockCrawlerMetrics)(nil).GetProcessedCount))
}

// GetProcessingDuration mocks base method.
func (m *MockCrawlerMetrics) GetProcessingDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessingDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetProcessingDuration indicates an expected call of GetProcessingDuration.
func (mr *MockCrawlerMetricsMockRecorder) GetProcessingDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessingDuration", reflect.TypeOf((*MockCrawlerMetrics)(nil).GetProcessingDuration))
}

// GetStartTime mocks base method.
func (m *MockCrawlerMetrics) GetStartTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetStartTime indicates an expected call of GetStartTime.
func (mr *MockCrawlerMetricsMockRecorder) GetStartTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartTime", reflect.TypeOf((*MockCrawlerMetrics)(nil).GetStartTime))
}

// IncrementError mocks base method.
func (m *MockCrawlerMetrics) IncrementError() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementError")
}

// IncrementError indicates an expected call of IncrementError.
func (mr *MockCrawlerMetricsMockRecorder) IncrementError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementError", reflect.TypeOf((*MockCrawlerMetrics)(nil).IncrementError))
}

// IncrementProcessed mocks base method.
func (m *MockCrawlerMetrics) IncrementProcessed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementProcessed")
}

// IncrementProcessed indicates an expected call of IncrementProcessed.
func (mr *MockCrawlerMetricsMockRecorder) IncrementProcessed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementProcessed", reflect.TypeOf((*MockCrawlerMetrics)(nil).IncrementProcessed))
}

// Reset mocks base method.
func (m *MockCrawlerMetrics) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockCrawlerMetricsMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockCrawlerMetrics)(nil).Reset))
}

// Update mocks base method.
func (m *MockCrawlerMetrics) Update(startTime time.Time, processed, errors int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", startTime, processed, errors)
}

// Update indicates an expected call of Update.
func (mr *MockCrawlerMetricsMockRecorder) Update(startTime, processed, errors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCrawlerMetrics)(nil).Update), startTime, processed, errors)
}

// MockContentProcessor is a mock of ContentProcessor interface.
type MockContentProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockContentProcessorMockRecorder
}

// MockContentProcessorMockRecorder is the mock recorder for MockContentProcessor.
type MockContentProcessorMockRecorder struct {
	mock *MockContentProcessor
}

// NewMockContentProcessor creates a new mock instance.
func NewMockContentProcessor(ctrl *gomock.Controller) *MockContentProcessor {
	mock := &MockContentProcessor{ctrl: ctrl}
	mock.recorder = &MockContentProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentProcessor) EXPECT() *MockContentProcessorMockRecorder {
	return m.recorder
}

// CanProcess mocks base method.
func (m *MockContentProcessor) CanProcess(contentType string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanProcess", contentType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanProcess indicates an expected call of CanProcess.
func (mr *MockContentProcessorMockRecorder) CanProcess(contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanProcess", reflect.TypeOf((*MockContentProcessor)(nil).CanProcess), contentType)
}

// ContentType mocks base method.
func (m *MockContentProcessor) ContentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContentType indicates an expected call of ContentType.
func (mr *MockContentProcessorMockRecorder) ContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockContentProcessor)(nil).ContentType))
}

// ProcessHTML mocks base method.
func (m *MockContentProcessor) ProcessHTML(ctx context.Context, element *colly.HTMLElement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessHTML", ctx, element)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessHTML indicates an expected call of ProcessHTML.
func (mr *MockContentProcessorMockRecorder) ProcessHTML(ctx, element interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessHTML", reflect.TypeOf((*MockContentProcessor)(nil).ProcessHTML), ctx, element)
}

// MockArticleStorage is a mock of ArticleStorage interface.
type MockArticleStorage struct {
	ctrl     *gomock.Controller
	recorder *MockArticleStorageMockRecorder
}

// MockArticleStorageMockRecorder is the mock recorder for MockArticleStorage.
type MockArticleStorageMockRecorder struct {
	mock *MockArticleStorage
}

// NewMockArticleStorage creates a new mock instance.
func NewMockArticleStorage(ctrl *gomock.Controller) *MockArticleStorage {
	mock := &MockArticleStorage{ctrl: ctrl}
	mock.recorder = &MockArticleStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleStorage) EXPECT() *MockArticleStorageMockRecorder {
	return m.recorder
}

// GetArticle mocks base method.
func (m *MockArticleStorage) GetArticle(ctx context.Context, id string) (*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", ctx, id)
	ret0, _ := ret[0].(*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockArticleStorageMockRecorder) GetArticle(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockArticleStorage)(nil).GetArticle), ctx, id)
}

// ListArticles mocks base method.
func (m *MockArticleStorage) ListArticles(ctx context.Context, query string) ([]*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticles", ctx, query)
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticles indicates an expected call of ListArticles.
func (mr *MockArticleStorageMockRecorder) ListArticles(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticles", reflect.TypeOf((*MockArticleStorage)(nil).ListArticles), ctx, query)
}

// SaveArticle mocks base method.
func (m *MockArticleStorage) SaveArticle(ctx context.Context, article *models.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveArticle", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveArticle indicates an expected call of SaveArticle.
func (mr *MockArticleStorageMockRecorder) SaveArticle(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveArticle", reflect.TypeOf((*MockArticleStorage)(nil).SaveArticle), ctx, article)
}

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockInterface) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockInterfaceMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockInterface)(nil).Done))
}

// GetArticleChannel mocks base method.
func (m *MockInterface) GetArticleChannel() chan *models.Article {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleChannel")
	ret0, _ := ret[0].(chan *models.Article)
	return ret0
}

// GetArticleChannel indicates an expected call of GetArticleChannel.
func (mr *MockInterfaceMockRecorder) GetArticleChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleChannel", reflect.TypeOf((*MockInterface)(nil).GetArticleChannel))
}

// GetIndexManager mocks base method.
func (m *MockInterface) GetIndexManager() interfaces.IndexManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexManager")
	ret0, _ := ret[0].(interfaces.IndexManager)
	return ret0
}

// GetIndexManager indicates an expected call of GetIndexManager.
func (mr *MockInterfaceMockRecorder) GetIndexManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexManager", reflect.TypeOf((*MockInterface)(nil).GetIndexManager))
}

// GetLogger mocks base method.
func (m *MockInterface) GetLogger() logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockInterfaceMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockInterface)(nil).GetLogger))
}

// GetMetrics mocks base method.
func (m *MockInterface) GetMetrics() *common.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(*common.Metrics)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockInterfaceMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockInterface)(nil).GetMetrics))
}

// GetProcessors mocks base method.
func (m *MockInterface) GetProcessors() []content.Processor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessors")
	ret0, _ := ret[0].([]content.Processor)
	return ret0
}

// GetProcessors indicates an expected call of GetProcessors.
func (mr *MockInterfaceMockRecorder) GetProcessors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessors", reflect.TypeOf((*MockInterface)(nil).GetProcessors))
}

// GetSource mocks base method.
func (m *MockInterface) GetSource() sources.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSource")
	ret0, _ := ret[0].(sources.Interface)
	return ret0
}

// GetSource indicates an expected call of GetSource.
func (mr *MockInterfaceMockRecorder) GetSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSource", reflect.TypeOf((*MockInterface)(nil).GetSource))
}

// SetCollector mocks base method.
func (m *MockInterface) SetCollector(collector *colly.Collector) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCollector", collector)
}

// SetCollector indicates an expected call of SetCollector.
func (mr *MockInterfaceMockRecorder) SetCollector(collector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCollector", reflect.TypeOf((*MockInterface)(nil).SetCollector), collector)
}

// SetMaxDepth mocks base method.
func (m *MockInterface) SetMaxDepth(depth int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxDepth", depth)
}

// SetMaxDepth indicates an expected call of SetMaxDepth.
func (mr *MockInterfaceMockRecorder) SetMaxDepth(depth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxDepth", reflect.TypeOf((*MockInterface)(nil).SetMaxDepth), depth)
}

// SetRateLimit mocks base method.
func (m *MockInterface) SetRateLimit(duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRateLimit", duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRateLimit indicates an expected call of SetRateLimit.
func (mr *MockInterfaceMockRecorder) SetRateLimit(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRateLimit", reflect.TypeOf((*MockInterface)(nil).SetRateLimit), duration)
}

// Start mocks base method.
func (m *MockInterface) Start(ctx context.Context, sourceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, sourceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockInterfaceMockRecorder) Start(ctx, sourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockInterface)(nil).Start), ctx, sourceName)
}

// Stop mocks base method.
func (m *MockInterface) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockInterfaceMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInterface)(nil).Stop), ctx)
}

// Subscribe mocks base method.
func (m *MockInterface) Subscribe(handler events.EventHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", handler)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockInterfaceMockRecorder) Subscribe(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockInterface)(nil).Subscribe), handler)
}

// Wait mocks base method.
func (m *MockInterface) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockInterfaceMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockInterface)(nil).Wait))
}
